// DO NOT EDIT : This file is generated by chevron
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// presto_protocol.prolog.cpp
//

// This file is generated DO NOT EDIT @generated

#include <folly/Format.h>
#include <iostream>

#include "presto_cpp/presto_protocol/connector/tpch/presto_protocol_tpch.h"
using namespace std::string_literals;

namespace facebook::presto::protocol {
void to_json(json& j, const std::shared_ptr<PlanNode>& p) {
  if (p == nullptr) {
    return;
  }
  String type = p->_type;

  if (type == ".AggregationNode") {
    j = *std::static_pointer_cast<AggregationNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.GroupIdNode") {
    j = *std::static_pointer_cast<GroupIdNode>(p);
    return;
  }
  if (type == ".DistinctLimitNode") {
    j = *std::static_pointer_cast<DistinctLimitNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.EnforceSingleRowNode") {
    j = *std::static_pointer_cast<EnforceSingleRowNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.ExchangeNode") {
    j = *std::static_pointer_cast<ExchangeNode>(p);
    return;
  }
  if (type == ".FilterNode") {
    j = *std::static_pointer_cast<FilterNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.JoinNode") {
    j = *std::static_pointer_cast<JoinNode>(p);
    return;
  }
  if (type == ".LimitNode") {
    j = *std::static_pointer_cast<LimitNode>(p);
    return;
  }
  if (type == ".MarkDistinctNode") {
    j = *std::static_pointer_cast<MarkDistinctNode>(p);
    return;
  }
  if (type == ".SortNode") {
    j = *std::static_pointer_cast<SortNode>(p);
    return;
  }
  if (type == ".OutputNode") {
    j = *std::static_pointer_cast<OutputNode>(p);
    return;
  }
  if (type == ".ProjectNode") {
    j = *std::static_pointer_cast<ProjectNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.RowNumberNode") {
    j = *std::static_pointer_cast<RowNumberNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.RemoteSourceNode") {
    j = *std::static_pointer_cast<RemoteSourceNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.SampleNode") {
    j = *std::static_pointer_cast<SampleNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.SemiJoinNode") {
    j = *std::static_pointer_cast<SemiJoinNode>(p);
    return;
  }
  if (type == ".TableScanNode") {
    j = *std::static_pointer_cast<TableScanNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.TableWriterNode") {
    j = *std::static_pointer_cast<TableWriterNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.TableWriterMergeNode") {
    j = *std::static_pointer_cast<TableWriterMergeNode>(p);
    return;
  }
  if (type == ".TopNNode") {
    j = *std::static_pointer_cast<TopNNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.TopNRowNumberNode") {
    j = *std::static_pointer_cast<TopNRowNumberNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.UnnestNode") {
    j = *std::static_pointer_cast<UnnestNode>(p);
    return;
  }
  if (type == ".ValuesNode") {
    j = *std::static_pointer_cast<ValuesNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.AssignUniqueId") {
    j = *std::static_pointer_cast<AssignUniqueId>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.MergeJoinNode") {
    j = *std::static_pointer_cast<MergeJoinNode>(p);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.WindowNode") {
    j = *std::static_pointer_cast<WindowNode>(p);
    return;
  }

  throw TypeError(type + " no abstract type PlanNode ");
}

void from_json(const json& j, std::shared_ptr<PlanNode>& p) {
  String type;
  try {
    type = p->getSubclassKey(j);
  } catch (json::parse_error& e) {
    throw ParseError(std::string(e.what()) + " PlanNode  PlanNode");
  }

  if (type == ".AggregationNode") {
    std::shared_ptr<AggregationNode> k = std::make_shared<AggregationNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.GroupIdNode") {
    std::shared_ptr<GroupIdNode> k = std::make_shared<GroupIdNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".DistinctLimitNode") {
    std::shared_ptr<DistinctLimitNode> k =
        std::make_shared<DistinctLimitNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.EnforceSingleRowNode") {
    std::shared_ptr<EnforceSingleRowNode> k =
        std::make_shared<EnforceSingleRowNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.ExchangeNode") {
    std::shared_ptr<ExchangeNode> k = std::make_shared<ExchangeNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".FilterNode") {
    std::shared_ptr<FilterNode> k = std::make_shared<FilterNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.JoinNode") {
    std::shared_ptr<JoinNode> k = std::make_shared<JoinNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".LimitNode") {
    std::shared_ptr<LimitNode> k = std::make_shared<LimitNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".MarkDistinctNode") {
    std::shared_ptr<MarkDistinctNode> k = std::make_shared<MarkDistinctNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".SortNode") {
    std::shared_ptr<SortNode> k = std::make_shared<SortNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".OutputNode") {
    std::shared_ptr<OutputNode> k = std::make_shared<OutputNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".ProjectNode") {
    std::shared_ptr<ProjectNode> k = std::make_shared<ProjectNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.RowNumberNode") {
    std::shared_ptr<RowNumberNode> k = std::make_shared<RowNumberNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.RemoteSourceNode") {
    std::shared_ptr<RemoteSourceNode> k = std::make_shared<RemoteSourceNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.SampleNode") {
    std::shared_ptr<SampleNode> k = std::make_shared<SampleNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.SemiJoinNode") {
    std::shared_ptr<SemiJoinNode> k = std::make_shared<SemiJoinNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".TableScanNode") {
    std::shared_ptr<TableScanNode> k = std::make_shared<TableScanNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.TableWriterNode") {
    std::shared_ptr<TableWriterNode> k = std::make_shared<TableWriterNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.TableWriterMergeNode") {
    std::shared_ptr<TableWriterMergeNode> k =
        std::make_shared<TableWriterMergeNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".TopNNode") {
    std::shared_ptr<TopNNode> k = std::make_shared<TopNNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.TopNRowNumberNode") {
    std::shared_ptr<TopNRowNumberNode> k =
        std::make_shared<TopNRowNumberNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.UnnestNode") {
    std::shared_ptr<UnnestNode> k = std::make_shared<UnnestNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == ".ValuesNode") {
    std::shared_ptr<ValuesNode> k = std::make_shared<ValuesNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.AssignUniqueId") {
    std::shared_ptr<AssignUniqueId> k = std::make_shared<AssignUniqueId>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.MergeJoinNode") {
    std::shared_ptr<MergeJoinNode> k = std::make_shared<MergeJoinNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }
  if (type == "com.facebook.presto.sql.planner.plan.WindowNode") {
    std::shared_ptr<WindowNode> k = std::make_shared<WindowNode>();
    j.get_to(*k);
    p = std::static_pointer_cast<PlanNode>(k);
    return;
  }

  throw TypeError(type + " no abstract type PlanNode ");
}
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
void to_json(json& j, const std::shared_ptr<RowExpression>& p) {
  if (p == nullptr) {
    return;
  }
  String type = p->_type;

  if (type == "call") {
    j = *std::static_pointer_cast<CallExpression>(p);
    return;
  }
  if (type == "constant") {
    j = *std::static_pointer_cast<ConstantExpression>(p);
    return;
  }
  if (type == "special") {
    j = *std::static_pointer_cast<SpecialFormExpression>(p);
    return;
  }
  if (type == "lambda") {
    j = *std::static_pointer_cast<LambdaDefinitionExpression>(p);
    return;
  }
  if (type == "variable") {
    j = *std::static_pointer_cast<VariableReferenceExpression>(p);
    return;
  }

  throw TypeError(type + " no abstract type RowExpression ");
}

void from_json(const json& j, std::shared_ptr<RowExpression>& p) {
  String type;
  try {
    type = p->getSubclassKey(j);
  } catch (json::parse_error& e) {
    throw ParseError(std::string(e.what()) + " RowExpression  RowExpression");
  }

  if (type == "call") {
    std::shared_ptr<CallExpression> k = std::make_shared<CallExpression>();
    j.get_to(*k);
    p = std::static_pointer_cast<RowExpression>(k);
    return;
  }
  if (type == "constant") {
    std::shared_ptr<ConstantExpression> k =
        std::make_shared<ConstantExpression>();
    j.get_to(*k);
    p = std::static_pointer_cast<RowExpression>(k);
    return;
  }
  if (type == "special") {
    std::shared_ptr<SpecialFormExpression> k =
        std::make_shared<SpecialFormExpression>();
    j.get_to(*k);
    p = std::static_pointer_cast<RowExpression>(k);
    return;
  }
  if (type == "lambda") {
    std::shared_ptr<LambdaDefinitionExpression> k =
        std::make_shared<LambdaDefinitionExpression>();
    j.get_to(*k);
    p = std::static_pointer_cast<RowExpression>(k);
    return;
  }
  if (type == "variable") {
    std::shared_ptr<VariableReferenceExpression> k =
        std::make_shared<VariableReferenceExpression>();
    j.get_to(*k);
    p = std::static_pointer_cast<RowExpression>(k);
    return;
  }

  throw TypeError(type + " no abstract type RowExpression ");
}
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
TpchColumnHandle::TpchColumnHandle() noexcept {
  _type = "tpch";
}

void to_json(json& j, const TpchColumnHandle& p) {
  j = json::object();
  j["@type"] = "tpch";
  to_json_key(
      j,
      "columnName",
      p.columnName,
      "TpchColumnHandle",
      "String",
      "columnName");
  to_json_key(j, "type", p.type, "TpchColumnHandle", "Type", "type");
}

void from_json(const json& j, TpchColumnHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j,
      "columnName",
      p.columnName,
      "TpchColumnHandle",
      "String",
      "columnName");
  from_json_key(j, "type", p.type, "TpchColumnHandle", "Type", "type");
}
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
TpchPartitioningHandle::TpchPartitioningHandle() noexcept {
  _type = "tpch";
}

void to_json(json& j, const TpchPartitioningHandle& p) {
  j = json::object();
  j["@type"] = "tpch";
  to_json_key(j, "table", p.table, "TpchPartitioningHandle", "String", "table");
  to_json_key(
      j,
      "totalRows",
      p.totalRows,
      "TpchPartitioningHandle",
      "int64_t",
      "totalRows");
}

void from_json(const json& j, TpchPartitioningHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j, "table", p.table, "TpchPartitioningHandle", "String", "table");
  from_json_key(
      j,
      "totalRows",
      p.totalRows,
      "TpchPartitioningHandle",
      "int64_t",
      "totalRows");
}
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
void to_json(json& j, const std::shared_ptr<ColumnHandle>& p) {
  if (p == nullptr) {
    return;
  }
  String type = p->_type;

  if (type == "hive") {
    j = *std::static_pointer_cast<HiveColumnHandle>(p);
    return;
  }
  if (type == "hive-iceberg") {
    j = *std::static_pointer_cast<IcebergColumnHandle>(p);
    return;
  }
  if (type == "tpch") {
    j = *std::static_pointer_cast<TpchColumnHandle>(p);
    return;
  }
  if (type == "$system@system") {
    j = *std::static_pointer_cast<SystemColumnHandle>(p);
    return;
  }

  throw TypeError(type + " no abstract type ColumnHandle ");
}

void from_json(const json& j, std::shared_ptr<ColumnHandle>& p) {
  String type;
  try {
    type = p->getSubclassKey(j);
  } catch (json::parse_error& e) {
    throw ParseError(std::string(e.what()) + " ColumnHandle  ColumnHandle");
  }

  if (type == "hive") {
    std::shared_ptr<HiveColumnHandle> k = std::make_shared<HiveColumnHandle>();
    j.get_to(*k);
    p = std::static_pointer_cast<ColumnHandle>(k);
    return;
  }
  if (type == "hive-iceberg") {
    std::shared_ptr<IcebergColumnHandle> k =
        std::make_shared<IcebergColumnHandle>();
    j.get_to(*k);
    p = std::static_pointer_cast<ColumnHandle>(k);
    return;
  }
  if (type == "tpch") {
    std::shared_ptr<TpchColumnHandle> k = std::make_shared<TpchColumnHandle>();
    j.get_to(*k);
    p = std::static_pointer_cast<ColumnHandle>(k);
    return;
  }
  if (type == "$system@system") {
    std::shared_ptr<SystemColumnHandle> k =
        std::make_shared<SystemColumnHandle>();
    j.get_to(*k);
    p = std::static_pointer_cast<ColumnHandle>(k);
    return;
  }

  throw TypeError(type + " no abstract type ColumnHandle ");
}
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
TpchTableHandle::TpchTableHandle() noexcept {
  _type = "tpch";
}

void to_json(json& j, const TpchTableHandle& p) {
  j = json::object();
  j["@type"] = "tpch";
  to_json_key(
      j, "tableName", p.tableName, "TpchTableHandle", "String", "tableName");
  to_json_key(
      j,
      "scaleFactor",
      p.scaleFactor,
      "TpchTableHandle",
      "double",
      "scaleFactor");
}

void from_json(const json& j, TpchTableHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j, "tableName", p.tableName, "TpchTableHandle", "String", "tableName");
  from_json_key(
      j,
      "scaleFactor",
      p.scaleFactor,
      "TpchTableHandle",
      "double",
      "scaleFactor");
}
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
TpchSplit::TpchSplit() noexcept {
  _type = "tpch";
}

void to_json(json& j, const TpchSplit& p) {
  j = json::object();
  j["@type"] = "tpch";
  to_json_key(
      j,
      "tableHandle",
      p.tableHandle,
      "TpchSplit",
      "TpchTableHandle",
      "tableHandle");
  to_json_key(j, "partNumber", p.partNumber, "TpchSplit", "int", "partNumber");
  to_json_key(j, "totalParts", p.totalParts, "TpchSplit", "int", "totalParts");
  to_json_key(
      j,
      "addresses",
      p.addresses,
      "TpchSplit",
      "List<HostAddress>",
      "addresses");
  to_json_key(
      j,
      "predicate",
      p.predicate,
      "TpchSplit",
      "TupleDomain<std::shared_ptr<ColumnHandle>>",
      "predicate");
}

void from_json(const json& j, TpchSplit& p) {
  p._type = j["@type"];
  from_json_key(
      j,
      "tableHandle",
      p.tableHandle,
      "TpchSplit",
      "TpchTableHandle",
      "tableHandle");
  from_json_key(
      j, "partNumber", p.partNumber, "TpchSplit", "int", "partNumber");
  from_json_key(
      j, "totalParts", p.totalParts, "TpchSplit", "int", "totalParts");
  from_json_key(
      j,
      "addresses",
      p.addresses,
      "TpchSplit",
      "List<HostAddress>",
      "addresses");
  from_json_key(
      j,
      "predicate",
      p.predicate,
      "TpchSplit",
      "TupleDomain<std::shared_ptr<ColumnHandle>>",
      "predicate");
}
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
TpchTableLayoutHandle::TpchTableLayoutHandle() noexcept {
  _type = "tpch";
}

void to_json(json& j, const TpchTableLayoutHandle& p) {
  j = json::object();
  j["@type"] = "tpch";
  to_json_key(
      j, "table", p.table, "TpchTableLayoutHandle", "TpchTableHandle", "table");
  to_json_key(
      j,
      "predicate",
      p.predicate,
      "TpchTableLayoutHandle",
      "TupleDomain<std::shared_ptr<ColumnHandle>>",
      "predicate");
}

void from_json(const json& j, TpchTableLayoutHandle& p) {
  p._type = j["@type"];
  from_json_key(
      j, "table", p.table, "TpchTableLayoutHandle", "TpchTableHandle", "table");
  from_json_key(
      j,
      "predicate",
      p.predicate,
      "TpchTableLayoutHandle",
      "TupleDomain<std::shared_ptr<ColumnHandle>>",
      "predicate");
}
} // namespace facebook::presto::protocol
