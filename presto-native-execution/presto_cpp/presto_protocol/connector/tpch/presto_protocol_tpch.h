// DO NOT EDIT : This file is generated by chevron
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

// This file is generated DO NOT EDIT @generated

#include <tgmath.h>
#include <cstdint>
#include <exception>
#include <iostream>
#include <list>
#include <map>
#include <regex>
#include <set>
#include <string>

#include <folly/Format.h>
#include <utility>
#include "presto_cpp/external/json/nlohmann/json.hpp"
#include "presto_cpp/presto_protocol/DataSize.h"
#include "presto_cpp/presto_protocol/Duration.h"
#include "presto_cpp/presto_protocol/core/presto_protocol_core.h"
#include "velox/common/encode/Base64.h"

// Forward declaration of all abstract types
//

/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// TpchColumnHandle is special since it needs an implementation of
// operator<().

namespace facebook::presto::protocol {
struct TpchColumnHandle : public ColumnHandle {
  String columnName = {};
  Type type = {};

  TpchColumnHandle() noexcept;

  bool operator<(const ColumnHandle& o) const override {
    return columnName < dynamic_cast<const TpchColumnHandle&>(o).columnName;
  }
};
void to_json(json& j, const TpchColumnHandle& p);
void from_json(const json& j, TpchColumnHandle& p);
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
struct TpchPartitioningHandle {
  String table = {};
  int64_t totalRows = {};
};
void to_json(json& j, const TpchPartitioningHandle& p);
void from_json(const json& j, TpchPartitioningHandle& p);
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
struct TpchTableHandle {
  String tableName = {};
  double scaleFactor = {};
};
void to_json(json& j, const TpchTableHandle& p);
void from_json(const json& j, TpchTableHandle& p);
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
struct TpchSplit {
  TpchTableHandle tableHandle = {};
  int partNumber = {};
  int totalParts = {};
  List<HostAddress> addresses = {};
  TupleDomain<std::shared_ptr<ColumnHandle>> predicate = {};
};
void to_json(json& j, const TpchSplit& p);
void from_json(const json& j, TpchSplit& p);
} // namespace facebook::presto::protocol
namespace facebook::presto::protocol {
struct TpchTableLayoutHandle {
  TpchTableHandle table = {};
  TupleDomain<std::shared_ptr<ColumnHandle>> predicate = {};
};
void to_json(json& j, const TpchTableLayoutHandle& p);
void from_json(const json& j, TpchTableLayoutHandle& p);
} // namespace facebook::presto::protocol
